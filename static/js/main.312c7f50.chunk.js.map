{"version":3,"sources":["logo.svg","components/DrumPad/DrumPad.js","components/Drum/Drum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","inactiveStyle","margin","backgroundColor","color","fontSize","borderRadius","border","boxShadow","fontFamily","activeStyle","transform","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","handleKeyPress","bind","assertThisInitialized","playSound","activatePad","document","addEventListener","setState","event","keyCode","keycode","_this2","power","sound","getElementById","text","keydown","display","currentTime","play","setTimeout","react_default","a","createElement","className","style","id","onClick","src","source","preload","type","React","Component","DRUM_SET_ONE","buttonText","Drum","displayText","keyDownUpdate","powerChange","pads","map","drumObj","i","padBankArr","react","components_DrumPad_DrumPad","alignItems","flexDirection","marginBotttom","marginBottom","Checkbox","slider","onChange","App","components_Drum_Drum","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.312c7f50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport \"./DrumPad.css\"\r\nconst inactiveStyle = {\r\n    margin: '2px',\r\n    backgroundColor: '#343434',\r\n    color: '#4dc75b',\r\n    fontSize: '25px',\r\n    borderRadius: '5px',\r\n    border: '2px solid grey',\r\n    boxShadow: '2px 2px 2px black',\r\n    fontFamily: '8BITWONDERNominal'\r\n}\r\nconst activeStyle = {\r\n    backgroundColor: '#4dc75b',\r\n    color: 'rgb(82, 82, 82)',\r\n    transform: 'scale(1.1)',\r\n    borderRadius: '5px',\r\n    border: '2px solid grey',\r\n    fontSize: '25px',\r\n    fontFamily: '8BITWONDERNominal'\r\n}\r\nclass DrumPad extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: inactiveStyle\r\n        }\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.playSound = this.playSound.bind(this);\r\n        this.activatePad = this.activatePad.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n    activatePad(){\r\n        this.state.active.color === '#4dc75b'?\r\n        this.setState({\r\n            active: activeStyle\r\n        }):\r\n            this.setState({\r\n                active: inactiveStyle\r\n            })\r\n\r\n\r\n    }\r\n    handleKeyPress(event){\r\n        if(event.keyCode===this.props.keycode){\r\n            this.playSound();\r\n        }\r\n    }\r\n    playSound(){\r\n        if(this.props.power==true){\r\n       let sound = document.getElementById(this.props.text);\r\n       this.props.keydown(this.props.display);\r\n       sound.currentTime = 0;\r\n       sound.play();\r\n        this.activatePad();\r\n        setTimeout(() => this.activatePad(), 150);\r\n    }\r\n    }\r\n   render() {\r\n       return (\r\n           <button className=\"drum-pad\"  style={this.state.active} id={this.props.id} onClick={this.playSound}>{this.props.text}\r\n               <audio id={this.props.text} className=\"clip\" src={this.props.source} preload=\"auto\" type=\"audio/mpeg\">\r\n               </audio>\r\n           </button>\r\n       );\r\n   }\r\n}\r\nexport default DrumPad;","import * as React from \"react\";\r\nimport './Drum.css'\r\nimport DrumPad from '../DrumPad/DrumPad'\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nconst DRUM_SET_ONE = [\r\n    {id: \"pad-one\", buttonText: \"Q\", keyCode: 81, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\", display: \"Heater-1\"},\r\n    {id: \"pad-two\", buttonText: \"W\", keyCode: 87, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\", display: \"Heater-2\"},\r\n    {id: \"pad-three\", buttonText: \"E\", keyCode: 69, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\", display: \"Heater-3\"},\r\n    {id: \"pad-four\", buttonText: \"A\", keyCode: 65, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\", display: \"Heater-4\"},\r\n    {id: \"pad-five\", buttonText: \"S\", keyCode: 83, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\", display: \"Heater-6\"},\r\n    {id: \"pad-six\", buttonText: \"D\", keyCode: 68, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\", display: \"Kick-n-Hat\"},\r\n    {id: \"pad-seven\", buttonText: \"Z\", keyCode: 90, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\", display: \"Disc-Oh\"},\r\n    {id: \"pad-eight\", buttonText: \"X\", keyCode: 88, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\", display: \"Give-us-a-light\"},\r\n    {id: \"pad-nine\", buttonText: \"C\", keyCode: 67, sound: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3 \", display: \"Dry-Ohh\"}\r\n];\r\nclass Drum extends React.Component{\r\n     constructor(props){\r\n         super(props);\r\n         this.state = {\r\n             displayText : 'Power is off',\r\n             power: false\r\n         }\r\n         this.keyDownUpdate = this.keyDownUpdate.bind(this);\r\n         this.powerChange = this.powerChange.bind(this);\r\n     }\r\n     keyDownUpdate(display){\r\n             this.setState({\r\n                 displayText: display});\r\n         }\r\n     powerChange(){\r\n         this.state.displayText == \"Power is off\"?\r\n         this.setState({\r\n             power : !this.state.power,\r\n             displayText: \"Power is on\"\r\n         }):this.setState({\r\n                 power : !this.state.power,\r\n                 displayText: \"Power is off\"\r\n             })\r\n\r\n     }\r\n     render(){\r\n         let pads;\r\n          pads = DRUM_SET_ONE.map((drumObj, i, padBankArr) => {\r\n              return (<DrumPad id={padBankArr[i].id} text={padBankArr[i].buttonText} keycode={padBankArr[i].keyCode} source={padBankArr[i].sound} display = {padBankArr[i].display} keydown = {this.keyDownUpdate} power={this.state.power}/>)});\r\n         return(\r\n             <div id=\"drum-machine\">\r\n                 <div>\r\n                 <div id=\"display\">{this.state.displayText}</div>\r\n             <div id=\"pad\">\r\n                 {pads}\r\n             </div>\r\n                 </div>\r\n             <div id = \"controls\">\r\n                <div style={{display:\"flex\", alignItems: \"center\", flexDirection :\"column\"}}>\r\n                    <i className=\"fas fa-drum\" style={{color:\"#4dc75b\", fontSize : \"70px\", marginBotttom : \"10px\"}}></i>\r\n                    <div style={{color:\"#4dc75b\", fontSize : \"20px\"}}><strong>Drum machine</strong></div>\r\n                </div>\r\n                 <div style={{display:\"flex\", alignItems: \"center\", flexDirection :\"column\"}}>\r\n                     <div style={{color:\"#4dc75b\",  marginBottom: \"10px\", fontSize : \"20px\"}} >Power</div>\r\n                     <Checkbox slider id=\"power\"  onChange={this.powerChange}/>\r\n                 </div>\r\n             </div>\r\n             </div>\r\n         )\r\n     }\r\n}\r\nexport default Drum;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Drum from'./components/Drum/Drum'\n\nfunction App() {\n  return (\n   <Drum />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}